#pragma once

#include "CommonInclude.h"
#include "wiPlatform.h"
#include "wiColor.h"
#include "wiVector.h"

namespace wi::input {
	enum BUTTON
	{
		GAMEPAD_RANGE_START = 256, // do not use!

		GAMEPAD_BUTTON_UP,
		GAMEPAD_BUTTON_LEFT,
		GAMEPAD_BUTTON_DOWN,
		GAMEPAD_BUTTON_RIGHT,
		GAMEPAD_BUTTON_1,
		GAMEPAD_BUTTON_2,
		GAMEPAD_BUTTON_3,
		GAMEPAD_BUTTON_4,
		GAMEPAD_BUTTON_5,
		GAMEPAD_BUTTON_6,
		GAMEPAD_BUTTON_7,
		GAMEPAD_BUTTON_8,
		GAMEPAD_BUTTON_9,
		GAMEPAD_BUTTON_10,
		GAMEPAD_BUTTON_11,
		GAMEPAD_BUTTON_12,
		GAMEPAD_BUTTON_13,
		GAMEPAD_BUTTON_14,

		// Xbox mapping of generic codes:
		GAMEPAD_BUTTON_XBOX_X = GAMEPAD_BUTTON_1,
		GAMEPAD_BUTTON_XBOX_A = GAMEPAD_BUTTON_2,
		GAMEPAD_BUTTON_XBOX_B = GAMEPAD_BUTTON_3,
		GAMEPAD_BUTTON_XBOX_Y = GAMEPAD_BUTTON_4,
		GAMEPAD_BUTTON_XBOX_L1 = GAMEPAD_BUTTON_5,
		GAMEPAD_BUTTON_XBOX_R1 = GAMEPAD_BUTTON_6,
		GAMEPAD_BUTTON_XBOX_L3 = GAMEPAD_BUTTON_7,
		GAMEPAD_BUTTON_XBOX_R3 = GAMEPAD_BUTTON_8,
		GAMEPAD_BUTTON_XBOX_BACK = GAMEPAD_BUTTON_9,
		GAMEPAD_BUTTON_XBOX_START = GAMEPAD_BUTTON_10,

		// Playstation mapping of generic codes:
		GAMEPAD_BUTTON_PLAYSTATION_SQUARE = GAMEPAD_BUTTON_1,
		GAMEPAD_BUTTON_PLAYSTATION_CROSS = GAMEPAD_BUTTON_2,
		GAMEPAD_BUTTON_PLAYSTATION_CIRCLE = GAMEPAD_BUTTON_3,
		GAMEPAD_BUTTON_PLAYSTATION_TRIANGLE = GAMEPAD_BUTTON_4,
		GAMEPAD_BUTTON_PLAYSTATION_L1 = GAMEPAD_BUTTON_5,
		GAMEPAD_BUTTON_PLAYSTATION_R1 = GAMEPAD_BUTTON_6,
		GAMEPAD_BUTTON_PLAYSTATION_L3 = GAMEPAD_BUTTON_7,
		GAMEPAD_BUTTON_PLAYSTATION_R3 = GAMEPAD_BUTTON_8,
		GAMEPAD_BUTTON_PLAYSTATION_SHARE = GAMEPAD_BUTTON_9,
		GAMEPAD_BUTTON_PLAYSTATION_OPTION = GAMEPAD_BUTTON_10,
		GAMEPAD_BUTTON_PLAYSTATION_SELECT = GAMEPAD_BUTTON_PLAYSTATION_SHARE,
		GAMEPAD_BUTTON_PLAYSTATION_START = GAMEPAD_BUTTON_PLAYSTATION_OPTION,

		GAMEPAD_RANGE_END = 275, // do not use!
	};

	struct ControllerState
	{
		uint32_t buttons = 0;
		XMFLOAT2 thumbstick_L = XMFLOAT2(0, 0);
		XMFLOAT2 thumbstick_R = XMFLOAT2(0, 0);
		float trigger_L = 0;
		float trigger_R = 0;
	};

	struct ControllerFeedback
	{
		float vibration_left = 0;	// left vibration motor (0: no vibration, 1: maximum vibration)
		float vibration_right = 0;	// right vibration motor (0: no vibration, 1: maximum vibration)
		wi::Color led_color;		// led color
	};

	struct Controller
	{
		enum DeviceType
		{
			DISCONNECTED,
			XINPUT,
			RAWINPUT
		};
		DeviceType deviceType;
		int deviceIndex;
		ControllerState state;
	};
}

